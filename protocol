		Ricochet Robots Game Protocol (RRGP)
		        Keith Packard
		      keithp@keithp.com
		         Carl Worth
		        cworth@isi.edu
			   2003-5-27
		$RCSId: $

Introduction

RRGP is a network protocol for playing the ricochet robots game.  It permits
a single server to host multiple games with named participants.  The
protocol is designed so that people can play using only telnet, but it is
expected that graphical interfaces will be able to drive the protocol as
well.

RRGP borrows ideas from other network protocols like SMTP using a
synchronous command interface.

Document Conventions

	All commands include a response (yeah, synchronous protocols are
	bad.  tough)

	<command> <args> 

	->

	<response>

	<response> is one of:

	<command> <args>
	ERROR <message>

1. Requests

1.1 Connection setup

	The RRGP server has no well defined port; agreement on which port to
	use must be done through some external mechanism.  Once connected,
	the client must identify itself:
	
	HELO <username>
	
	->
	
	HELO <servername>

1.2. Listing available users

	WHO

	->

	WHO <username1> <username2> ...

1.3. Listing available games

	GAMES

	->

	GAMES <game1> <game2> ...

1.4. Listing players in a game

	PLAYERS <game>

	->

	PLAYERS <username1> <score1> <username2> <score2> ...

1.5. Listing watchers of a game

	WATCHERS <game>

	->

	WATCERS <username1> <username2> ...

1.5. Get game information

	GAMEINFO <game>

	->

	GAMEINFO <turn> <color> <shape> <state> <time> <bid> <active>

	<turn> is a number from 1 to 17 indicating the current turn
	<color> <shape> indicate the active piece
	<state> is one of:
		new	Turn just started, no bids yet
		bid	Bidding opened.  <time> indicates time remaining,
			<bid> indicates the minimum bid
		show	Bidding closed and solution being demonstrated
			<active> indicates the person demonstrating
		solved 	Solution succesfully demonstrated that
			is less than the active users bid. <active>
			indicates the winner.
	<time> is valid only in BID state, else it's 0
	<bid> is valid in all but NEW state where it's 0
	<active> is valid in SHOW and SOLVED states, else it's ""

1.6. Get user information

	USERINFO <username>

	->

	USERINFO <game> <playing> <score> <bid>

	<game> is any currently associated game, else "".  If the user
	is not associated with any game, the remaining fields are
	false 0 0.
	
	<playing> is true if the user is playing and false if watching.

	<score> is a number from 0 to 17 indicating this players score

	<bid> is either "none" indicating no bid or a number indicating
	the users minimum bid.
	
1.7. Creating a new game

	NEW <game-suggestion>

	->

	NEW <game>

1.8. Joining an existing game

	JOIN <game>

	->

	JOIN

	Possible errors: NOGAME

1.9. Watching an existing game

	WATCH <game>

	->

	WATCH

	The client will monitor the game, but not be listed in the
	userlist nor be allowed to make moves.

	Possible errors: NOGAME

1.10. Get the game contents

	SHOW

	->

	SHOW <game-board>

	<game-board> is a quoted multi-line string containing an
	diagram of the game contents, (an array of cells). A single
	cell and its surrounding are indicated as:

	 HHH 
	VrcsV
	 HHH

	H = ' ' or '='
	V = ' ' or '|'
	r = '.' or <robot-color>  (one of 'r', 'g', 'b', or 'y')
	c = '.' or <target-color> (one of 'r', 'g', 'b', or 'y')
	s = '.' or <target-shape> (one of 'c', 's', 'o', or 't')

	The goal robot and target (color and shape) are indicated with
	capital letters.

	For example:

	SHOW "
	 ===
	|R.. ... .gs
	
	 byc|... .RT|
	 ===    ==="

	R.. = 	Red robot (goal robot)
	.gs = 	Green square target
	byc = 	Blue robot on yellow circle target
	.RT =	Red triangle (goal target)

	Possible errors: NOTINGAME

1.11. Bid

	BID <number>

	->

	BID

	Possible errors: NOTINGAME, NOTBIDDING, NOTNUMBER, NOTLOWER

1.12. Revoke

	REVOKE

	->

	REVOKE

	Possible errors: NOTINGAME, NOTBIDDING, NOBID

1.13. Move

	MOVE <color> <dir>

	->

	MOVE <count>

	<color> is one of 'R', 'Y', 'G' or 'B', <dir> is one of 'N', 'E',
	'S' or 'W'.

	Possible errors: NOTINGAME, NOTACTIVE, BLOCKED, TOOMANYMOVES

1.14. Undo

	UNDO

	->

	UNDO

	Undoes the last move

	Possible errors: NOTINGAME, NOTACTIVE

	XXX: Do we add another error code for no further undo?

1.15. Reset

	RESET

	->

	RESET

	Resets robot positions to that at the start of the turn.

	Possible errors: NOTINGAME, NOTACTIVE

1.16. Next turn

	TURN

	->

	TURN

	Advance the game to the next turn, (which will have a new
	target square). The robots will start in their final positions
	at the end of the first successfully demonstrated solution.

	If a solution has been demonstrated, or if all users with
	active bids have issued PASS then a TURN request from a single
	user has immediate effect. Otherwise, the server requires a
	TURN request from each active user before it will ABANDON the
	current turn.

	Possible errors: NOTINGAME

1.17. Pass the bid to the next lowest bidder

	PASS

	->

	PASS

	Possible errors: NOTINGAME

1.18. Message

	MESSAGE <text>

	->
	
	MESSAGE

	Possible errors: NOTINGAME

1.19. Part

	PART

	->

	PART

	Departs the current game

1.20. Quit

	QUIT

	->

	QUIT

2. Asynchronous notification.  

	The server will send notices to each user in a game whenever
        there is a move. It will also send notices to every connected
        client when additional people join or new games are
        started. These are of the form:

	NOTICE <notice-code> <args>

	Game-specific notices are sent to users involved in the related
	game, other notices are sent to all users.  Note that even the user
	originating the notice receives a copy.

2.1. Move notice (game)

	NOTICE MOVE <count> <color> <dir>

2.2. New users (all)

	NOTICE USER <username>

2.3. Disconnected user (all)

	NOTICE QUIT <username>

2.4. New games (all)

	NOTICE GAME <game>

2.5. Terminated games (all)

	NOTICE TERMINATE <game>

2.6. Bids (game)

	NOTICE BID <username> <number>

2.7. Revoke (game)

	NOTICE REVOKE <username>

2.8. Timer (game)

	NOTICE TIME <seconds>

	Timer ticks are sent every 10 seconds

2.9. Select active player (game)

	NOTICE ACTIVE <username> <bid>

	Only the active player may move the robots

2.10. Game state change

	NOTICE GAMESTATE <state>

2.11. Undo (game)

	NOTICE UNDO

2.12. Reset (game)

	NOTICE RESET

2.13. Next turn (game)

	NOTICE TURN <color> <shape>

2.14. Message (all)

	NOTICE MESSAGE <username> <text>

2.15. Abandon request (game)

	NOTICE ABANDON <username>

	<username> has requested that the current turn be abandoned
	(i.e. TURN requested without a solution demonstrated)
	If all active users in the current game make a TURN
	request, then the turn is abandoned and the next turn
	selected with the robots reset to their position before the
	turn started.

2.16. Join game (game)

	NOTICE JOIN <username>

2.17. Watch game (game)

	NOTICE WATCH <username>

2.18. User departed game (game)

	NOTICE PART <username>

3. Errors

	The following error codes may be returned.

3.1. No such game

	ERROR NOGAME

	A game name was provided that does not exist.

3.1. Not in game

	ERROR NOTINGAME

	A game playing command was made, but the user is not a
	particpant of any game.

	Possibly returned by: SHOW, MOVE, RESET, UNDO, TURN, PASS,
	MESSAGE.

3.2. Not bidding

	ERROR NOTBIDDING

	A bid was submitted after the bidding closed

	Possibly returned by: BID

3.3. Not lower

	ERROR NOTLOWER

	A bid was submitted that was higher than previous bid.

	Possibly returned by: BID

3.4. No bid

	ERROR NOBID

	A revoke was requested when no bid had been entered

	Possibly returned by: REVOKE

3.5. Not active

	ERROR NOTACTIVE

	A move, undo or reset was submitted by other than the
	active user.
	
	Possibly returned by: MOVE, RESET, UNDO

3.6. Not number

	ERROR NOTNUMBER

	A non-numeric value was supplied where a number was required
	
3.7. Blocked

	ERROR BLOCKED

	The robot cannot move the requested direction.

	Possibly returned by: MOVE

3.8. TOOMANYMOVES

	ERROR TOOMANYMOVES

	An attempt was made to make more moves than the users bid

	Possibly returned by: MOVE

3.8. Command

	ERROR COMMAND

	An invalid command was specified

3.9. Syntax

	ERROR SYNTAX

	A syntax error was detected

3.10. Not color

	ERROR NOTCOLOR

	The color name specified in the command was invalid

3.11. Not shape

	ERROR NOTSHAPE

	The shape name specified in the command was invalid

3.12. Not direction

	ERROR NOTDIRECTION

	The direction name specified in the command was invalid

3.13. No name set

	ERROR NONAMESET

	'helo' must be sent before any command other than 'quit'.

3.14. Invalid name

	ERROR INVALIDNAME

	All names must be unique.



Some comments/questions
-----------------------

>> Hmmm... looks like a user can only be in a single game (would need to
>> fix SHOW, BID, MOVE, RESET, TURN, NOTICE, etc.)

> Yup.

It doesn't seem right to support multiple games in a single server yet
not allow the same user to JOIN or WATCH more than one game
simultaneously.

Or is the idea that I connect as cworth1, cworth2, etc.? (ugh)

--

The server manages ACTIVE based on bids, scores, and PASS
requests. Once a turn is over, (solution demonstrated or all bidding
users PASS), it would be nice to allow others to show alternate
solutions, failed attempts, etc. Shall we provide a way for the ACTIVE
user to pass control to another, (only when a turn is over)? Or maybe
since the turn is over we just let any user move the pieces?

--

We should add PART and UNWATCH commands to leave the current game,
(while still staying connected to perhaps join other games).

