		Ricochet Robots Game Protocol (RRGP)
		        Keith Packard
		      keithp@keithp.com
		         Carl Worth
		        cworth@isi.edu
			   2003-5-27
		$RCSId: $

Introduction

RRGP is a network protocol for playing the ricochet robots game.  It permits
a single server to host multiple games with named participants.  The
protocol is designed so that people can play using only telnet, but it is
expected that graphical interfaces will be able to drive the protocol as
well.

RRGP borrows ideas from other network protocols like SMTP using a
synchronous command interface.

Document Conventions

	All commands include a response (yeah, synchronous protocols are
	bad.  tough)

	<command> <args> 

	->

	<success-code>
	<response> <data>

	<success-code> is one of:

	OK
	ERROR <message>

	If <success-code> is "OK", then the reply data will follow and be
	terminated by "DONE"

1. Requests

1.1 Connection setup

	The RRGP server has no well defined port; agreement on which port to
	use must be done through some external mechanism.  Once connected,
	the client must identify itself:
	
	HELO <username>
	
	->
	
	OK
	WELCOME <servername>
	DONE

1.2. Listing available users

	WHO

	->

	OK
	USER <username1>
	USER <username2>
	...
	DONE

1.3. Listing available games

	GAMES

	->

	OK
	GAME <game1>
	GAME <game2>
	...
	DONE

1.4. Listing users in a game

	USERS <game>

	->

	OK
	USER <username1>, <score1>
	USER <username2>, <score2>
	...
	DONE

1.5. Creating a new game

	NEW <game-suggestion>

	->

	OK
	GAME <game>
	DONE

1.6. Joining an existing game

	JOIN <game>

	->

	OK
	USER <username1>
	USER <username2>
	...
	DONE

	Possible errors: NOGAME

1.7. Watching an existing game

	WATCH <game>

	->

	OK
	USER <username1>
	USER <username2>
	...
	DONE

	The client will monitor the game, but not be listed in the
	userlist nor be allowed to make moves.

	Possible errors: NOGAME

1.8. Get the game contents

	SHOW

	->

	OK
	SPC <spc-data>
	ROW <row-data>
	...
	DONE

	"<spc-data>" is either '   ', ' | ' or '---'.  "<row-data>" is
	either ' . ', ' | ', ' <color><shape>', '_<color><shape>',
	' ww', '_ww', ' <color> ' or '_<color>_'.
	
	<color> is 'R', 'Y', 'G' or 'B', shape is 't', 's', 'o', 'c'

	Possible errors: NOGAME

1.9. Bid

	BID <number>

	->

	OK
	DONE

	Possible errors: TIMEOUT

1.10. Move

	MOVE <color>, <dir>

	->

	OK
	DONE

	<color> is one of 'R', 'Y', 'G' or 'B', <dir> is one of 'N', 'E',
	'S' or 'W'.

	Possible errors: NOTACTIVE

1.12. Undo

	UNDO

	->

	OK
	DONE

	Undoes the last move

	Possible errors: NOTACTIVE

1.13. Reset

	RESET

	->

	OK
	DONE

	Resets robot positions to that at the start of the turn.

	Possible errors: NOTACTIVE

1.14. Next turn

	TURN

	->

	OK
	DONE

	Advance the game to the next turn, (which will have a new
	target square). The robots will start in their final positions
	at the end of the first successfully demonstrated solution.

	If a solution has been demonstrated, or if all users with
	active bids have issued PASS then a TURN request from a single
	user has immediate effect. Otherwise, the server requires a
	TURN request from each active user before it will ABANDON the
	current turn.

1.15. Pass the bid to the next lowest bidder

	PASS

	->

	OK
	DONE

1.16. Message

	MESSAGE <text>

	->
	
	OK
	DONE

2. Asynchronous notification.  

	The server will send notices to each user in a game whenever
        there is a move. It will also send notices to every connected
        client when additional people join or new games are
        started. These are of the form:

	NOTICE
	<notice-code> <args>
	DONE

2.1. Move notice

	NOTICE
	MOVE <color>, <dir>
	DONE

2.2. New users

	NOTICE
	USER <username>
	DONE

2.3. Disconnected user

	NOTICE
	PART <username>
	DONE

2.4. New games

	NOTICE
	GAME <game>
	DONE

2.5. Terminated games

	NOTICE
	TERMINATE <game>
	DONE

2.6. Bids

	NOTICE
	BID <number>, <username>
	DONE

2.7. Timer

	NOTICE
	TIME <seconds>
	DONE

	Timer ticks are sent every 10 seconds

2.8. Select active player

	NOTICE
	ACTIVE <username>
	DONE

	Only the active player may move the robots

2.9. Move

	NOTICE
	MOVE <color>, <dir>
	DONE

2.10. Undo

	NOTICE
	UNDO
	DONE

2.11. Reset

	NOTICE
	RESET
	DONE

2.12. Next turn

	NOTICE
	TURN <color>, <shape>
	DONE

	<color><shape> will be 'ww' for the whirlpool.

2.13. Message

	NOTICE
	MESSAGE <text>
	USER <username>
	DONE

2.14. Abandon request

	NOTICE
	ABANDON <username>
	DONE

	<username> has requested that the current turn be abandoned
	(i.e. TURN requested without a solution demonstrated>
	If all active users in the current game make a TURN
	request, then the turn is abandoned and the next turn
	selected with the robots reset to their position before the
	turn started.

3. Errors

	The following error codes may be returned.

3.1. No such game

	ERROR NOGAME

	A game number was requested but no such game exists.

	Possibly returned by: JOIN, WATCH

3.2. Time out

	ERROR TIMEOUT

	A bid was submitted after the timer expired.

	Possibly returned by: BID

3.3. Not active

	ERROR NOTACTIVE

	A move, undo or reset was submitted by other than the
	active user.
	
	Possibly returned by: MOVE, RESET, UNDO

Some comments (still need to be incorporated into the specification)
--------------------------------------------------------------------

New proposal for ASCII board art:

	 ==
	|.. .. ..
	|RR .. gg
	
	 gs|.. RT|
	 ..|.. ..|
	 ==    ==
	
	RT =	Red triangle (goal target)
	gs = 	Green square (non-goal target)
	RR = 	Red robot (goal robot)
	gg = 	Green robot (non-goal target)

--

>> Hmmm... looks like a user can only be in a single game (would need to
>> fix SHOW, BID, MOVE, RESET, TURN, NOTICE, etc.)

> Yup.

It doesn't seem right to support multiple games in a single server yet
not allow the same user to JOIN or WATCH more than one game
simultaneously.

Or is the idea that I connect as cworth1, cworth2, etc.? (ugh)

--

>> And does the server know the rules/keep score?

> I think it might as well; the C code I've got already manages that part.

We'll need to provide scores. I've added a score field to the result
from USERS. Do we want anything more?

--

The server manages ACTIVE based on bids, scores, and PASS
requests. Once a turn is over, (solution demonstrated or all bidding
users PASS), it would be nice to allow others to show alternate
solutions, failed attempts, etc. Shall we provide a way for the ACTIVE
user to pass control to another, (only when a turn is over)? Or maybe
since the turn is over we just let any user move the pieces?

--

With the new ABANDON semantics, (and the possible free-for-all moving
of pieces mentioned above), a new TURN may jump several robots back to
previous positions. I think the TURN notice should include the current
board diagram. (The diagram contains the new target, so it won't need
to be provided externally)
