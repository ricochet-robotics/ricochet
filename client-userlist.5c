/*
 * Copyright Â© 2012 Keith Packard <keithp@keithp.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

autoload Client;
autoload Nichrome;
autoload Nichrome::Box;
autoload Nichrome::Label;
autoload Skiplist;

extend namespace Client {
	public namespace Userlist {

		import Nichrome;

		typedef struct {
			string		name;
			*Label::label_t	name_label;
			bool		playing;
			int		games;
			*Label::label_t	games_label;
			int		score;
			*Label::label_t	score_label;
			int		bid;
			*Label::label_t	bid_label;
			string		mode;
			*Label::label_t	mode_label;
		} user_t;

		typedef union {
			*user_t		user;
			void		none;
		} user_or_none_t;

		typedef struct {
			*Label::label_t		label;
			*Box::box_t		box;
			int			width;
		} column_t;

		public typedef struct {
			*nichrome_t		ui;
			*Box::box_t		hbox;
			column_t		name;
			column_t		games;
			column_t		score;
			column_t		bid;
			column_t		mode;
			Skiplist::Skip		names;
			user_or_none_t		showing;
			string			font;
			string			bold_font;
			string			italic_font;
		} userlist_t;

		bool user_greater(*user_t a, *user_t b)  = a->name > b->name;

		protected void set_boxes(&userlist_t ul) {
			void init_box(*column_t column) {
				column->box->items = (Box::item_t[...]) {};
				Box::add_item(column->box, Box::widget_item(column->label, 1, 0));
			}
			init_box(&ul.name);
			init_box(&ul.games);
			init_box(&ul.score);
			init_box(&ul.bid);
			init_box(&ul.mode);
			Skiplist::walk (ul.names, void func (*user_t user) {
					Box::add_item(ul.name.box, Box::widget_item(user->name_label, 0, 0));
					Box::add_item(ul.games.box, Box::widget_item(user->games_label, 0, 0));
					Box::add_item(ul.score.box, Box::widget_item(user->score_label, 0, 0));
					Box::add_item(ul.bid.box, Box::widget_item(user->bid_label, 0, 0));
					Box::add_item(ul.mode.box, Box::widget_item(user->mode_label, 0, 0));
				});
			Box::add_item(ul.name.box, Box::glue_item(0, 0, ul.name.width));
			Box::add_item(ul.games.box, Box::glue_item(0, 0, ul.score.width));
			Box::add_item(ul.score.box, Box::glue_item(0, 0, ul.score.width));
			Box::add_item(ul.bid.box, Box::glue_item(0, 0, ul.bid.width));
			Box::add_item(ul.mode.box, Box::glue_item(0, 0, ul.mode.width));
		}

		string games_string(int games) {
			return sprintf("%d", games);
		}

		string score_string(bool playing, int score) {
			if (playing)
				return sprintf("%d", score);
			return "";
		}

		string bid_string(bool playing, int bid) {
			if (playing)
				return sprintf("%d", bid);
			return "";
		}

		public void score(*userlist_t ul, string name, int score) {
			*user_t find = &(user_t) {
				.name = name
			};
			try {
				*user_t user = Skiplist::search(ul->names, find);
				user->score = score;
				Label::relabel(user->score_label, score_string(user->playing, user->score));
			} catch Skiplist::not_found(*user_t x) {
			}
		}

		public void bid(*userlist_t ul, string name, int bid) {
			try {
				*user_t user = Skiplist::search(ul->names,
								&(user_t) { .name = name });
				user->bid = bid;
				Label::relabel(user->bid_label, bid_string(user->playing, user->bid));
			} catch Skiplist::not_found(*user_t x) {
			}
		}

		public void clear_bid(*userlist_t ul) {
			Skiplist::walk (ul->names, void func (*user_t user) {
					user->bid = 0;
					Label::relabel(user->bid_label, bid_string(user->playing, user->bid));
				});
		}

		public void clear_score(*userlist_t ul) {
			Skiplist::walk (ul->names, void func (*user_t user) {
					user->score = 0;
					Label::relabel(user->score_label, score_string(user->playing, user->score));
				});
		}

		void set_font(*user_t user, string font) {
			user->name_label->font = font;
			user->games_label->font = font;
			user->score_label->font = font;
			user->bid_label->font = font;
			user->mode_label->font = font;
		}

		void set_showing (*userlist_t ul, *user_t user, bool showing) {
			if (showing) {
				if (ul->showing != (user_or_none_t.user) user) {
					union switch (ul->showing) {
					case user old:
						set_font(old, ul->font);
						break;
					default:
					}
					ul->showing = (user_or_none_t.user) user;
					set_font(user, ul->bold_font);
				}
			} else {
				if (ul->showing == (user_or_none_t.user) user) {
					ul->showing = user_or_none_t.none;
					set_font(user, ul->font);
				}
			}
		}

		public void showing(*userlist_t ul, string name, bool showing) {
			try {
				*user_t user = Skiplist::search(ul->names,
								&(user_t) { .name = name });
				set_showing (ul, user, showing);
			} catch Skiplist::not_found(*user_t x) {
			}
		}

		public void clear_showing(*userlist_t ul) {
			union switch (ul->showing) {
			case user u:
				set_showing (ul, u, false);
				break;
			default:
			}
		}

		public void clear_modes(*userlist_t ul) {
			Skiplist::walk (ul->names, void func (*user_t user) {
					Label::relabel(user->mode_label, "");
				});
		}

		public void set_mode(*userlist_t ul, string name, string mode) {
			try {
				*user_t user = Skiplist::search(ul->names,
								&(user_t) { .name = name });
				user->mode = mode;
				Label::relabel(user->mode_label, user->mode);
			} catch Skiplist::not_found(*user_t x) {
			}
		}

		public void add(*userlist_t ul, string name, bool playing, int games, int score, int bid) {
			*user_t find = &(user_t) { .name = name };
			try {
				Skiplist::search(ul->names, find);
			} catch Skiplist::not_found(*user_t x) {
				*user_t user = &(user_t) {
					.name = name,
					.name_label = Label::new(ul->ui, name),
					.playing = playing,
					.games = games,
					.games_label = Label::new(ul->ui, games_string(games)),
					.score = score,
					.score_label = Label::new(ul->ui, score_string(playing, score)),
					.bid = bid,
					.bid_label = Label::new(ul->ui, bid_string(playing, bid)),
					.mode = "",
					.mode_label = Label::new(ul->ui, ""),
				};
				string font = ul->font;
				if (!playing)
					font = ul->italic_font;
				user->name_label->font = font;
				user->name_label->justify = Label::justify_t.left;
				user->games_label->font = font;
				user->score_label->font = font;
				user->bid_label->font = font;
				user->mode_label->font = font;
				Skiplist::insert(ul->names, user);
				set_boxes(ul);
			}
		}

		public void remove(*userlist_t ul, string name) {
			*user_t find = &(user_t) { .name = name };
			try {
				*user_t user = Skiplist::search(ul->names, find);
				Skiplist::delete(ul->names, user);
				Nichrome::remove(ul->ui, user->name_label);
				Nichrome::remove(ul->ui, user->score_label);
				Nichrome::remove(ul->ui, user->bid_label);
				Nichrome::remove(ul->ui, user->mode_label);
				set_boxes(ul);
			} catch Skiplist::not_found(string x) {
			}
		}

		protected void init (*userlist_t ul,
				     *nichrome_t ui) {
			ul->ui = ui;
			ul->font = Widget::default_font;
			ul->bold_font = sprintf("%s:bold", Widget::default_font);
			ul->italic_font = sprintf("%s:italic", Widget::default_font);

			ul->names = Skiplist::new(user_greater);
			Cairo::cairo_t	cr = Nichrome::cairo(ui);
			Cairo::set_font(cr, ul->font);
			Cairo::text_extents_t x = Cairo::text_extents(cr, "x");
			real x_width = x.x_advance;
			void init_column(*column_t column, string label, int width) {
				column->label = Label::new(ui, label);
				column->label->font = ul->bold_font;
				column->box = Box::new(Box::dir_t.vertical);
				column->width = ceil(width * x_width);
			}
			init_column(&ul->name, "Player", 32);
			ul->name.label->justify = Label::justify_t.left;
			init_column(&ul->games, "Games", 3);
			init_column(&ul->score, "Score", 2);
			init_column(&ul->bid, "Bid", 3);
			init_column(&ul->mode, "State", 12);
			ul->hbox = Box::new(Box::dir_t.horizontal,
					    Box::box_item(ul->name.box),
					    Box::box_item(ul->games.box),
					    Box::box_item(ul->score.box),
					    Box::box_item(ul->bid.box),
					    Box::box_item(ul->mode.box));
			ul->showing = user_or_none_t.none;
			set_boxes(ul);
		}

		public *userlist_t new (*nichrome_t ui) {
			*userlist_t	ul = &(userlist_t) {};
			init(ul, ui);
			return ul;
		}
	}
}
