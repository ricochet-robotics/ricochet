/*
 * Copyright Â© 2012 Keith Packard <keithp@keithp.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

autoload Client;
autoload Nichrome;
autoload Nichrome::Box;
autoload Nichrome::Label;
autoload Skiplist;

extend namespace Client {
	public namespace Userlist {

		import Nichrome;

		public typedef struct {
			string		name;
			*Label::label_t	name_label;
			int		score;
			*Label::label_t	score_label;
		} user_t;

		public typedef struct {
			*nichrome_t		ui;
			*Box::box_t		hbox;
			*Label::label_t		name_label;
			*Label::label_t		score_label;
			*Box::box_t		name_box;
			*Box::box_t		score_box;
			Skiplist::Skip		names;
			int			count;
		} userlist_t;

		bool user_greater(*user_t a, *user_t b)  = a->name > b->name;

		protected void set_boxes(&userlist_t ul) {
			Box::item_t[...]	names = {};
			Box::item_t[...]	scores = {};
			ul.name_box->items = (Box::item_t[...]) {};
			ul.score_box->items = (Box::item_t[...]) {};
			Box::add_item(ul.name_box, Box::widget_item(ul.name_label, 1, 0));
			Box::add_item(ul.score_box, Box::widget_item(ul.score_label, 1, 0));
			Skiplist::walk (ul.names, void func (*user_t user) {
					Box::add_item(ul.name_box, Box::widget_item(user->name_label, 0, 0));
					Box::add_item(ul.score_box, Box::widget_item(user->score_label, 0, 0));
				});
			Box::add_item(ul.name_box, Box::glue_item(0, 1));
			Box::add_item(ul.score_box, Box::glue_item(0, 1));
		}

		public void score(*userlist_t ul, string name, int score) {
			*user_t find = &(user_t) {
				.name = name
			};
			try {
				*user_t user = Skiplist::search(ul->names, find);
				user->score = score;
				Label::relabel(user->score_label,
					       sprintf("%d", score));
			} catch Skiplist::not_found(*user_t x) {
			}
		}

		public void add(*userlist_t ul, string name, int score) {
			printf ("add %s %d\n", name, score);
			*user_t find = &(user_t) { .name = name };
			try {
				Skiplist::search(ul->names, find);
			} catch Skiplist::not_found(*user_t x) {
				*user_t user = &(user_t) {
					.name = name,
					.name_label = Label::new((ul->ui), name),
					.score = score,
					.score_label = Label::new((ul->ui), sprintf("%d", score))
				};
				Skiplist::insert(ul->names, user);
				ul->count = Skiplist::length(ul->names);
				set_boxes(ul);
			}
		}

		public void remove(*userlist_t ul, string name) {
			printf ("remove %s\n", name);
			*user_t find = &(user_t) { .name = name };
			try {
				*user_t user = Skiplist::search(ul->names, find);
				Skiplist::delete(ul->names, user);
				Nichrome::remove(ul->ui, user->name_label);
				Nichrome::remove(ul->ui, user->score_label);
				ul->count = Skiplist::length(ul->names);
				set_boxes(ul);
			} catch Skiplist::not_found(string x) {
			}
		}

		protected void init (*userlist_t ul,
				     *nichrome_t ui) {
			ul->ui = ui;
			ul->names = Skiplist::new(user_greater);
			ul->name_label = Label::new(ui, "Player");
			ul->name_label->font = sprintf("%s:bold", Widget::default_font);
			ul->score_label = Label::new(ui, "Score");
			ul->score_label->font = ul->name_label->font;
			ul->name_box = Box::new(Box::dir_t.vertical);
			ul->score_box = Box::new(Box::dir_t.vertical);
			ul->hbox = Box::new(Box::dir_t.horizontal,
					    Box::box_item(ul->name_box),
					    Box::box_item(ul->score_box));
			ul->count = 0;
		}

		public *userlist_t new (*nichrome_t ui) {
			*userlist_t	ul = &(userlist_t) {};
			init(ul, ui);
			return ul;
		}
	}
}
