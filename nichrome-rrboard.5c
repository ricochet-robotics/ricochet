/*
 * Copyright Â© 2012 Keith Packard <keithp@keithp.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

autoload Nichrome;
autoload RR;
autoload Client;
autoload Client::Draw;

extend namespace Nichrome {

	public namespace RRboard {

		import Client;
		import RR;

		public int	board_width = RR::Width * Draw::cell_width;
		public int	board_height = RR::Height * Draw::cell_height;

		public typedef RR::Object + struct {
			bool	dirty;
		} rrobject_t;

		public typedef rrobject_t[RR::Width, RR::Height] rrboard_t;

		public typedef widget_t + struct {
			rrboard_t		board;
			RR::TargetOrNone	target;
		} rrboard_widget_t;

		void draw (cairo_t cr, &rrboard_widget_t widget) {
			real	xinc = widget.geometry.width / board_width;
			real	yinc = widget.geometry.height / board_height;

			save(cr);
			scale(cr, xinc, yinc);
			for (int y = 0; y < RR::Height; y++)
				for (int x = 0; x < RR::Width; x++)
					if (widget.board[x,y].dirty) {
						Draw::background(cr, x, y, widget.board[x,y]);
						Draw::walls(cr, x, y, widget.board[x,y]);
						Draw::contents(cr, x, y, widget.board[x,y]);
						widget.board[x,y].dirty = false;
					}
			RR::TargetOrNone new_target = RR::active_target(&widget.board);
			if (new_target != widget.target) {
				widget.target = new_target;
				for (int y = RR::Height / 2 - 1; y < RR::Height/2 + 1; y++)
					for (int x = RR::Width / 2 - 1; x < RR::Width/2 + 1; x++) {
						Draw::background(cr, x, y, widget.board[x,y]);
						Draw::walls(cr, x, y, widget.board[x,y]);
					}
				Draw::target(cr, RR::Width / 2 - 1, RR::Height / 2 - 1,
					     new_target);
			}
			restore(cr);
		}

		void outline (cairo_t cr, &rrboard_widget_t widget) {
			rectangle(cr, 0, 0, widget.geometry.width, widget.geometry.height);
		}

		void natural (cairo_t cr, &rrboard_widget_t widget) {
			rectangle(cr, 0, 0, board_width, board_height);
		}

		public *rrboard_widget_t new(&nichrome_t nichrome) {
			rrboard_widget_t	widget;

			Widget::init(&nichrome, &widget);
			widget.draw = draw;
			widget.outline = outline;
			widget.natural = natural;
			widget.board = (rrboard_t) { { { .robot = RobotOrNone.none,
							 .target = TargetOrNone.none,
							 .walls = { .left = false, .right = false,
								  .above = false, .below = false },
							 .dirty = true }
						       ... } ... };
			widget.target = TargetOrNone.none;
			return &widget;
		}
	}
}
