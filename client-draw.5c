/*
 * Copyright Â© 2012 Keith Packard <keithp@keithp.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

autoload Cairo;
autoload Client;
autoload Client::SVG;

extend namespace Client {

	public namespace Draw {

		import Cairo;
		import Cairo::Rsvg;
		import RR;

		rsvg_t[2]	cell = { new_from_string(Client::SVG::cell1),
					 new_from_string(Client::SVG::cell2) };

		rsvg_t[Color]	robots = {
			Color.Red => new_from_string(Client::SVG::robot_red),
			Color.Blue => new_from_string(Client::SVG::robot_blue),
			Color.Yellow => new_from_string(Client::SVG::robot_yellow),
			Color.Green => new_from_string(Client::SVG::robot_green) };

		rsvg_t robot_shadow = new_from_string(Client::SVG::robot_shadow);

		rsvg_t[Color][Shape]	targets = {
			Color.Red => {
				Shape.Triangle => new_from_string(Client::SVG::target_red_triangle),
				Shape.Square => new_from_string(Client::SVG::target_red_square),
				Shape.Octagon => new_from_string(Client::SVG::target_red_octagon),
				Shape.Circle => new_from_string(Client::SVG::target_red_circle),
			},
			Color.Yellow => {
				Shape.Triangle => new_from_string(Client::SVG::target_yellow_triangle),
				Shape.Square => new_from_string(Client::SVG::target_yellow_square),
				Shape.Octagon => new_from_string(Client::SVG::target_yellow_octagon),
				Shape.Circle => new_from_string(Client::SVG::target_yellow_circle),
			},
			Color.Green => {
				Shape.Triangle => new_from_string(Client::SVG::target_green_triangle),
				Shape.Square => new_from_string(Client::SVG::target_green_square),
				Shape.Octagon => new_from_string(Client::SVG::target_green_octagon),
				Shape.Circle => new_from_string(Client::SVG::target_green_circle),
			},
			Color.Blue => {
				Shape.Triangle => new_from_string(Client::SVG::target_blue_triangle),
				Shape.Square => new_from_string(Client::SVG::target_blue_square),
				Shape.Octagon => new_from_string(Client::SVG::target_blue_octagon),
				Shape.Circle => new_from_string(Client::SVG::target_blue_circle),
			},
			Color.Whirl => {
				Shape.Whirl => new_from_string(Client::SVG::target_whirl),
			},
		};

		rsvg_t 		wall = new_from_string(Client::SVG::wall);

		dimensions_t cell_dim  = get_dimensions(cell[0]);

		public int cell_width = cell_dim.width;
		public int cell_height = cell_dim.height;

		public void background (cairo_t cr, int x, int y, RR::Object object) {
			save(cr);
			translate(cr, x * cell_width, y * cell_height);

			render(cell[x+y & 1], cr);
			restore(cr);
		}
		
		public void walls(cairo_t cr, int x, int y, RR::Object object) {
			save(cr);
			translate(cr, x * cell_width, y * cell_height);
			rectangle(cr, 0, 0, cell_width, cell_height);
			clip(cr);

			void draw_wall (bool doit, bool vertical, bool shift) {
				if (!doit) return;
				save(cr);
				if (vertical) {
					rotate(cr, pi/2);
					if (shift)
						translate(cr, 0, -cell_height);
				} else if (shift)
						translate(cr, 0, cell_height);
				render(wall, cr);
				restore(cr);
			}
			draw_wall (object.walls.left, true, false);
			draw_wall (object.walls.above, false, false);
			draw_wall (object.walls.right, true, true);
			draw_wall (object.walls.below, false, true);
			restore(cr);
		}
		
		public void contents (cairo_t cr, int x, int y, RR::Object object) {
			save(cr);
			translate(cr, x * cell_width, y * cell_height);

			union switch (object.target) {
			case none:
				break;
			case target t:
				render(targets[t.color][t.shape], cr);
				break;
			}
			union switch(object.robot) {
			case none:
				break;
			case robot r:
				if (r.active) {
					save(cr);
					translate(cr, 5, 1);
					scale(cr, 1.1, 1.1);
					render(robot_shadow, cr);
					restore(cr);
				}
				render(robots[r.color], cr);
				break;
			}
			restore(cr);
		}

		public void target (cairo_t cr, real x, real y, TargetOrNone target) {
			save(cr);
			translate(cr, x * cell_width, y * cell_height);
			scale(cr, 2, 2);
			union switch (target) {
			case target t:
				render(targets[t.color][t.shape], cr);
				break;
			default:
				break;
			}
			restore(cr);
		}
	}
}
