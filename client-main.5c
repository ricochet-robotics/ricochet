/*
 * Copyright Â© 2012 Keith Packard <keithp@keithp.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

autoload Client;
autoload Client::Window;
autoload Client::Link;
autoload Client::Update;
autoload Client::Userlist;
autoload ParseArgs;
autoload RR;
autoload Cairo;
autoload Nichrome;
autoload Nichrome::Button;
autoload Nichrome::Box;
autoload Nichrome::Label;
autoload Nichrome::Toggle;
autoload Nichrome::Text;
autoload Nichrome::RRboard;
autoload Mutex;

extend namespace Client {

	public namespace Main {
		import Nichrome;
		import RRboard;
		import Box;
		import RR;
		import Userlist;

		string	host = "localhost";
		int	port = RR::Port;
		string	name = "user";
		string	game = "game";
		Mutex::mutex	board_lock = Mutex::new();

		Link::link_t	link;

		ParseArgs::argdesc argd = {
			.args = {
				{ .var = { .arg_string = &host },
				  .abbr = 'h',
				  .name = "host",
				  .expr_name = "hostname",
				  .desc = "server hostname"},
				{ .var = { .arg_int = &port },
				  .abbr = 'p',
				  .name = "port",
				  .expr_name = "port",
				  .desc = "server port" },
				{ .var = { .arg_string = &name },
				  .abbr = 'n',
				  .name = "name",
				  .expr_name = "username",
				  .desc = "user name" },
				{ .var = { .arg_string = &game },
				  .abbr = 'g',
				  .name = "game",
				  .expr_name = "gamename",
				  .desc = "proposed game name" },
			},
			.unknown = &(int user_argind),
			.prog_name = "rrclient"
		};

		&nichrome_t		ui;
		&Button::button_t	connect;
		&Button::button_t	quit;
		&Text::text_t		bid;
		&rrboard_widget_t	rrboard;
		&userlist_t		userlist;

		void update_board(string board) {
			twixt (Mutex::acquire(board_lock); Mutex::release(board_lock))
				Update::update(&(rrboard.board), board);
		}

		void update_robot(Color color, int x, int y) {
			twixt (Mutex::acquire(board_lock); Mutex::release(board_lock))
				Update::update_robot(&(rrboard.board), color, x, y);
		}

		void handle_notice() {
			for (;;) {
				Link::message_t notice = Link::notice(link);
				printf ("notice %v\n", notice);
				switch (notice->reply[1]) {
				case "BOARD":
					update_board(notice->reply[2]);
					break;
				case "POSITION":
					update_robot(RR::color(notice->reply[2]),
						     string_to_integer(notice->reply[3]),
						     string_to_integer(notice->reply[4]));
					break;
				case "JOIN":
					Userlist::add(&userlist, notice->reply[2], 0);
					break;
				case "PART":
					Userlist::remove(&userlist, notice->reply[2]);
					break;
				case "SCORE":
					Userlist::score(&userlist, notice->reply[2],
							string_to_integer(notice->reply[3]));
					break;

				}
				Nichrome::redraw(&ui);
			}
		}

		public void main () {
			ParseArgs::parseargs(&argd, &argv);

			&ui = Nichrome::new("Ricochet Robots", board_width, board_height);
			&rrboard = RRboard::new(&ui);
			&userlist = Userlist::new(&ui);

			&connect = Button::new(&ui, "Connect",
					       void func (&widget_t w, bool state) {
					       });
			&quit = Button::new(&ui, "Quit",
					    void func (&widget_t w, bool state) {
						    Link::close(link);
						    w.nichrome.running = false;
						    Thread::list();
						    exit(0);
					    });

			&bid = Text::new(&ui, 6);

			&box_t			top = Box::new (Box::dir_t.horizontal,
								Box::widget_item(&connect, 0),
								Box::widget_item(&quit, 0),
								Box::widget_item(&bid, 0),
								Box::glue_item(1));
			&box_t			hbox = Box::new (Box::dir_t.horizontal,
								 Box::widget_item(&rrboard, 1),
								 Box::box_item(userlist.hbox));
			&box_t			vbox = Box::new (Box::dir_t.vertical,
								 Box::box_item(&top),
								 Box::box_item(&hbox));
			link = Link::new(host, port);

			Link::message_t r = Link::command(link, "helo %s\n", name);

			Link::message_t r = Link::command(link, "join %s\n", game);

			if (r->reply[0] == "ERROR" && r->reply[1] == "NOGAME")
				Link::message_t r = Link::command(link, "new %s\n", game);

			Link::message_t r = Link::command(link, "PLAYERS %s\n", game);

			for (int i = 1; i < dim(r->reply); i += 2)
				Userlist::add(&userlist, r->reply[i],
					      string_to_integer(r->reply[i+1]));

			fork handle_notice();

			Link::message_t r = Link::command(link, "show\n");

			update_board(r->reply[1]);

			set_box(&ui, &vbox);

			main_loop(&ui);
		}
	}
}

