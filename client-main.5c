/*
 * Copyright Â© 2012 Keith Packard <keithp@keithp.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

autoload Client;
autoload Client::Window;
autoload Client::Link;
autoload Client::Update;
autoload ParseArgs;
autoload RR;
autoload Cairo;
autoload Nichrome;
autoload Nichrome::Button;
autoload Nichrome::Box;
autoload Nichrome::Label;
autoload Nichrome::Toggle;
autoload Nichrome::RRboard;

extend namespace Client {

	public namespace Main {
		import Nichrome;
		import RRboard;
		import Box;
		import RR;

		string	host = "localhost";
		int	port = RR::Port;
		string	name = "user";
		string	game = "game";

		*Link::link_t	link;

		ParseArgs::argdesc argd = {
			.args = {
				{ .var = { .arg_string = &host },
				  .abbr = 'h',
				  .name = "host",
				  .expr_name = "hostname",
				  .desc = "server hostname"},
				{ .var = { .arg_int = &port },
				  .abbr = 'p',
				  .name = "port",
				  .expr_name = "port",
				  .desc = "server port" },
				{ .var = { .arg_string = &name },
				  .abbr = 'n',
				  .name = "name",
				  .expr_name = "username",
				  .desc = "user name" },
				{ .var = { .arg_string = &game },
				  .abbr = 'g',
				  .name = "game",
				  .expr_name = "gamename",
				  .desc = "proposed game name" },
			},
			.unknown = &(int user_argind),
			.prog_name = "rrclient"
		};

		public void main () {
			ParseArgs::parseargs(&argd, &argv);
			&nichrome_t		ui = Nichrome::new("Ricochet Robots", board_width, board_height);
			&rrboard_widget_t	rrboard = RRboard::new(&ui);
			&box_t			box = Box::new (Box::dir_t.vertical,
								Box::widget_item(&rrboard));
			set_box(&ui, &box);

			link = Link::new(host, port);

			*Link::message_t r = Link::command(link, "helo %s\n", name);

			*Link::message_t r = Link::command(link, "join %s\n", game);

			if (r->type == "ERROR" && r->args[0] == "NOGAME")
				*Link::message_t r = Link::command(link, "new %s\n", game);

			*Link::message_t r = Link::command(link, "show\n");

			Update::update(&(rrboard.board), r->args[0]);

			main_loop(&ui);
		}
	}
}

